a = 1
a
a = 1
a
source("~/.active-rstudio-document", echo=TRUE)
a = 2
a = c(1,2,3,4,5)
a
b = 1:5
b
c = c(3,1,5,6,7)
source("~/.active-rstudio-document", echo=TRUE)
b = array(1:20, dim=c(4,5))
b
c = matrix(1:10, nrow=2)
c
# 리스트
d = list(name = "test", age = 20,
phone = "01012345678")
d
d["name"]
df = data.frame(name = c("test", "test2"),
age = c(20, 30),
phone = c("01012345678", "01098765432"))
df
# if문
a = 10
print("a는 20보다 작거나 같다다")
if (a > 20){
print("a는 20보다 크다")
}else{
print("a는 20보다 작거나 같다다")
}
if (a>20){print("a는 20보다크다")}
if (a>20){print("a는 20보다크다")}else{print("a는 20보다 작거나 같다")}
if (a>20){print("a는 20보다크다")
}else{print("a는 20보다 작거나 같다")}
else{print("a는 20보다 작거나 같다")}
if (a>20){print("a는 20보다크다")}
else{print("a는 20보다 작거나 같다")}
if (a>20){print("a는 20보다크다")
}else{print("a는 20보다 작거나 같다")}
# which 문
name  = c("test", "test2", "test3")
which(name == "test2")
which(name != "test2")
which(name == "test5")
a <- 1
5 -> a
# 함수
func_1 = function(){
print("Hello R")
}
func_1()
# 매개변수가 존재하는 함수 생성
func_2 = function(x, y){
result = x ^ y
return(result)
}
func_2(5, 2)
func_3 = function(x, y){result=x^y; return(result);}
func_3(5, 2)
# 매개변수 존재하는 경우 (매개변수에 기본값을 설정)
func_4 = function(x, y=3){
result = x ^ y
return(result)
}
func_4(10)
func_4(10, 5)
func_4(10, 2)
e = 1:10
f = 1:5
## 매개변수의 개수가 가변인 경우
func_5 = function(x, ...){
print(x),
summary(...)
}
## 매개변수의 개수가 가변인 경우
func_5 = function(x, ...){
print(x),
summary(...)
}
## 매개변수의 개수가 가변인 경우
func_5 = function(x, ...){
print(x)
summary(...)
}
func_5("test", e)
func_5("test2", f)
source("~/.active-rstudio-document", echo=TRUE)
student
source("~/.active-rstudio-document", echo=TRUE)
scores
source("~/.active-rstudio-document", echo=TRUE)
gender = c("M", "F", "F", "M", "F", "M")
cbind(students, gender)
gender = c("M", "F", "F", "M", "F")
cbind(students, gender)
students
students = cbind(students, gender)
students
## 새로운 컬럼을 추가 ( 중간 + 기말 합친 데이터를 추가 )
# case1 (위에 중간, 기말 성적 백터 데이터의 합 )
total_score = midturm + final
total_score
# case2 ( 중간 성적 컬럼의 값, 기말 성적의 값 두개의 합 )
# 컬럼 하나의 값을 출력
students$midturm
students[["final"]]
students[[4]]
students[[5]]
total_score2 = students$midturm + students[["final"]]
total_score2
total_score == total_score2
cbind(students, total_score)
new_student = data.frame(name = "test6",
grade= 3,
midturm = 80,
final = 70,
gender = "F")
new_student
rbind(students, new_student)
## 인덱스를 기준으로 필터링
## 데이터프레임[행의 수, 열의 수]
students[1,]
students[2:4,]
students[-2, ]
# 행의 수가 들어가는 부분에 조건식이 들어가면 참이 값만 출력
students$grade > 2
students[students$grade > 2, ]
# 정렬 (grade 기준)
order(students$grade)
students[order(students$grade), ]
# 내림차순 정렬
order(students$grade, decreasing = TRUE)
order(-students$grade)
students[order(-students$grade), ]
# 결측치가 포함된 연산
x = c(7, 9, NA, 5, 2)
x[x>6]
students[order(-students$grade)]
students[order(-students$grade), ]
x[x>6]
subset(x, x>6)
# csv 파일 로드
df = read.csv("./csv/csv_exam.csv")
df
head(df)
head(df, 2)
tail(df)
tail(df, 2)
view(df)
View(df)
# 데이터프레임의 크기를 출력
dim(df)
#데이터프레임의 속성 값을 출력
str(df)
# 컬럼의 데이터의 개수를 출력
table(df$class)
# 통계 요약 정보 출력
summary(df)
summary(df$math)
## dplyr 패키지 설치
install.packages("dplyr")
# dplyr패키지 로드
library(dplyr)
detach("package:dplyr", unload = TRUE)
library(dplyr)
install.packages("ggplot2")
df_raw = data.frame(var1 = c(1, 2, 1),
var2 = c(2, 3, 5))
df_raw
# rename(데이터프레임명, 새 컬럼명=변경이될 컬럼명)
rename(df_raw, v2 = var2)
df_raw
# 파생변수 생성
df_raw$sum = df_raw$var1 + df_raw$var2
df_raw
# if문을 이용해서 파생변수
# sum의 값이 5보다 크면 pass 아니면 fail
df_raw$res = ifelse(df_raw > 5, "pass", "fail")
df_raw
df_raw = data.frame(var1 = c(1, 2, 1),
var2 = c(2, 3, 5))
df_raw
# 파생변수 생성
df_raw$sum = df_raw$var1 + df_raw$var2
# if문을 이용해서 파생변수
# sum의 값이 5보다 크면 pass 아니면 fail
df_raw$res = ifelse(df_raw$sum > 5, "pass", "fail")
df_raw
# 다중 if문을 사용하려면?
# sum의 값이 5보다 크면 "pass" 5인 경우는 "hold"
# 5보다 작으면 "fail"
df_raw$res = ifelse(df_raw$sum > 5, "pass",
ifelse(df_raw$sum == 5, "hold", "fail"))
df_raw
# dplyr 패키지에 있는 내장 함수들 사용
df
df %>% filter(class == 1)
# arrange() 정렬을 변경하는 함수
df %>%  arrange(math)
df %>% arrange(desc(math))
df %>% arrange(-math)
# 정렬의 기준을 여러개
df %>% arrange(class, math)
# 클래스를 기준으로 오름차순, 수학 성적 기준으로 내림차순
df %>% arrange(class, desc(math))
df %>% arrange(class, -math)
# 특정 컬럼만 선택하여 출력
df %>% select(class)
df %>% select(class, math, english)
# 특정 컬럼만 삭제하여 출력
df %>% select(-class)
# 컬럼의 범위 지정
df %>% select(class : english)
# 새로운 컬럼을 추가하는 함수
df %>% mutate(total = math + english + science,
mean = total/3)
df
# group_by(), summarise() 그룹화
df %>% group_by(class) %>% summarise(mean_math = mean(math),
mean_english = mean(english))
## df 데이터프레임에서 class를 기준으로 내림차순 정렬 ->
## class , english 컬럼만 출력
df %>% arrnage(desc(class)) %>% select(class, english)
## df 데이터프레임에서 class를 기준으로 내림차순 정렬 ->
## class , english 컬럼만 출력
df %>% arrange(desc(class)) %>% select(class, english)
source("~/.active-rstudio-document", echo=TRUE)
(80,70,80,90,95))
df_2 = data.frame(id = 1:5, weight = c(80,70,75,65,60))
df_3 = data.frame(id = 1:3, class = c(1,1,2))
df_1 = data.frame(id = 1:5, score = c(80,70,80,90,95))
df_2 = data.frame(id = 1:5, weight = c(80,70,75,65,60))
df_3 = data.frame(id = 1:3, class = c(1,1,2))
#inner_join() -> 교집합
inner_join(df_1, df_2, by="id")
inner_join(df_1, df_3, by="id")
#left_join()
left_join(df_1, df_2, by="id")
left_join(df_1, df_3, by="id")
#right_join()
right_join(df_1, df_2, by="id")
right_join(df_1, df_3, by="id")
# bind_rows() 데이터프레임에 행을 추가하는 함수
# 데이터프레임에 유니언 결합
rbind(df_1, df_2)
bind_rows(df_1, df_2)
c1 = c(1,2,NA,NA,5)
c2 = c(1,2,3,4,5)
c3 = c(NA,2,3,4,5)
df = data.frame(c1, c2, c3)
df
## is.na() 함수를 이용하여 결측치의 값을 확인
## 결측치인 경우 True 결측치가 아닌경우 False
is.na(df)
# is.na()함수와 table()함수를 이용하면 결측치 개수를 확인
table(is.na(df))
is.na(df$c1)
table(is.na(df$c1))
# 결측치를 제거하는 방법
# case1
df %>% filter(is.na(c1))
df %>% filter(~is.na(c1))
df %>% filter(!is.na(c1))
# case2
na.omit(df)
## 결측치를 제거하여 연산
## 결측치가 존재하면 연산 되지 않는다.
mean(df$c1)
mean(df$c1, na.rm = T)
sum(df$c1)
sum(df$c1, na.rm=T)
exam = read.csv("./csv/csv_exam.csv")
exam
## 특정 부분에 결측치를 추가
exam[c(5,7), 3]
## 특정 부분에 결측치를 추가
exam[c(5,7), 3] = NA
exam
dim(exam)
table(is.na(exam))
mean(exam$math)
mean(exam$math, na.rm=T)
NA == NA
## 수학 성적에 있는 결측치 부분에 평균 값을 삽입
exam$math = ifelse(is.na(exam$math),
mean(exam$math, na.rm=T),
exam$math)
exam
mean(exam$math)
exam = read.csv("./csv/csv_exam.csv")
exam
## 특정 부분에 결측치를 추가
exam[c(5,7), 3] = NA
exam
dim(exam)
table(is.na(exam))
mean(exam$math)
## 수학 성적에 있는 결측치 부분에 평균 값을 삽입
exam$math = ifelse(is.na(exam$math),
mean(exam$math, na.rm=T),
exam$math)
table(is.na(exam))
exam = read.csv("./csv/csv_exam.csv")
exam
## 특정 부분에 결측치를 추가
exam[c(5,7), 3] = NA
exam
is.na(exam$math)
source("~/.active-rstudio-document", echo=TRUE)
## 이상치 제거
outlier = data.frame(gender = c(1,2,1,2,3),
score = c(80,90,70,80,50))
outlier
table(outlier$gender)
#성별에 있는 3이라는 수치는 이상치
# 성별이 3인 데이터는 결측치로 변경
outlier$gender = ifelse(outlier$gender == 3, NA, outlier$gender)
outlier
## 이상치 제거
outlier = data.frame(gender = c(1,2,1,2,3),
score = c(80,90,70,80,50))
# 성별이 1,2면 원래의 값을 삽입 이 값이 아니면 NA
outlier$gender = ifelse(outlier$gender %in% c(1,2), outlier$gender, NA)
outlier
## 이상치 제거
outlier = data.frame(gender = c(1,2,1,2,3),
score = c(80,90,70,80,50))
outlier$gender = ifelse(outlier$gender == 1 or outlier$gender == 2, outlier$gender, NA)
outlier$gender = ifelse(outlier$gender == 1 | outlier$gender == 2, outlier$gender, NA)
outlier
outlier %>%
filter(!is.na(gender)) %>%
group_by(gender) %>%
summarise(score_mean = mean(score))
## ggplot2 로드
library(ggplot2)
mpg = ggplot2::mpg
View(mpg)
## 극단치 고속도로연비 기준으로
boxplot(mpg$hwy)
boxplot(mpg$hwy)$stats
## 극단치를 결측치로 변경
mpg$hwy = ifelse(
mpg$hwy > 37 | mpg$hwy < 12,
NA,
mpg$hwy
)
table(is.na(mpg$hwy))
## 결측치를 제거 -> 제조사 그룹화 -> 평균 고속도로연비
mpg %>%
filter(!is.na(hwy)) %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
## 결측치를 제거 -> 제조사 그룹화 -> 평균 고속도로연비
mpg %>%
filter(!is.na(hwy)) %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
order_by(desc(mean_hwy))
## 결측치를 제거 -> 제조사 그룹화 -> 평균 고속도로연비
mpg %>%
filter(!is.na(hwy)) %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
order_by(mean_hwy)
## 결측치를 제거 -> 제조사 그룹화 -> 평균 고속도로연비
mpg %>%
filter(!is.na(hwy)) %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(-mean_hwy)
## 결측치를 제거 -> 제조사 그룹화 -> 평균 고속도로연비
mpg %>%
filter(!is.na(hwy)) %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(-mean_hwy) %>%
head(5)
