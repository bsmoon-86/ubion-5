exam$math = ifelse(is.na(exam$math),
mean(exam$math, na.rm=T),
exam$math)
exam
mean(exam$math)
exam = read.csv("./csv/csv_exam.csv")
exam
## 특정 부분에 결측치를 추가
exam[c(5,7), 3] = NA
exam
dim(exam)
table(is.na(exam))
mean(exam$math)
## 수학 성적에 있는 결측치 부분에 평균 값을 삽입
exam$math = ifelse(is.na(exam$math),
mean(exam$math, na.rm=T),
exam$math)
table(is.na(exam))
exam = read.csv("./csv/csv_exam.csv")
exam
## 특정 부분에 결측치를 추가
exam[c(5,7), 3] = NA
exam
is.na(exam$math)
source("~/.active-rstudio-document", echo=TRUE)
## 이상치 제거
outlier = data.frame(gender = c(1,2,1,2,3),
score = c(80,90,70,80,50))
outlier
table(outlier$gender)
#성별에 있는 3이라는 수치는 이상치
# 성별이 3인 데이터는 결측치로 변경
outlier$gender = ifelse(outlier$gender == 3, NA, outlier$gender)
outlier
## 이상치 제거
outlier = data.frame(gender = c(1,2,1,2,3),
score = c(80,90,70,80,50))
# 성별이 1,2면 원래의 값을 삽입 이 값이 아니면 NA
outlier$gender = ifelse(outlier$gender %in% c(1,2), outlier$gender, NA)
outlier
## 이상치 제거
outlier = data.frame(gender = c(1,2,1,2,3),
score = c(80,90,70,80,50))
outlier$gender = ifelse(outlier$gender == 1 or outlier$gender == 2, outlier$gender, NA)
outlier$gender = ifelse(outlier$gender == 1 | outlier$gender == 2, outlier$gender, NA)
outlier
outlier %>%
filter(!is.na(gender)) %>%
group_by(gender) %>%
summarise(score_mean = mean(score))
## ggplot2 로드
library(ggplot2)
mpg = ggplot2::mpg
View(mpg)
## 극단치 고속도로연비 기준으로
boxplot(mpg$hwy)
boxplot(mpg$hwy)$stats
## 극단치를 결측치로 변경
mpg$hwy = ifelse(
mpg$hwy > 37 | mpg$hwy < 12,
NA,
mpg$hwy
)
table(is.na(mpg$hwy))
## 결측치를 제거 -> 제조사 그룹화 -> 평균 고속도로연비
mpg %>%
filter(!is.na(hwy)) %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy))
## 결측치를 제거 -> 제조사 그룹화 -> 평균 고속도로연비
mpg %>%
filter(!is.na(hwy)) %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
order_by(desc(mean_hwy))
## 결측치를 제거 -> 제조사 그룹화 -> 평균 고속도로연비
mpg %>%
filter(!is.na(hwy)) %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
order_by(mean_hwy)
## 결측치를 제거 -> 제조사 그룹화 -> 평균 고속도로연비
mpg %>%
filter(!is.na(hwy)) %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(-mean_hwy)
## 결측치를 제거 -> 제조사 그룹화 -> 평균 고속도로연비
mpg %>%
filter(!is.na(hwy)) %>%
group_by(manufacturer) %>%
summarise(mean_hwy = mean(hwy)) %>%
arrange(-mean_hwy) %>%
head(5)
library(dplyr)
library(ggplo2)
library(ggplot2)
mpg = ggpplot2::mpg
mpg = ggplot2::mpg
## 파생변수 추가 (도심연비 + 고속도로 연비 / 2)
# case1
mpg$total = (mpg$cty + mpg$hwy)/2
head(mpg)
## 파생변수 추가 (도심연비 + 고속도로 연비 / 2)
# case1
mpg$total = (mpg$cty + mpg$hwy)/2
head(mpg)
mpg = ggplot2::mpg
source("~/.active-rstudio-document", echo=TRUE)
# case2 (dplyr 패키지 사용)
mpg %>%
mutate(total = (cty + hwy)/2) %>%
select(cty, hwy, total) %>%
head()
# case1
mpg$test = ifelse(mpg$total >= 30, "A", (ifelse(mpg$total >= 20, "B", "C")))
# case2 (dplyr 패키지 사용)
mpg = mpg %>%
mutate(total = (cty + hwy)/2) %>%
select(cty, hwy, total) %>%
head()
# case1
mpg$test = ifelse(mpg$total >= 30, "A", (ifelse(mpg$total >= 20, "B", "C")))
head(mpg)
mpg = ggplot2::mpg
## 파생변수 추가 (도심연비 + 고속도로 연비 / 2)
# case1
mpg$total = (mpg$cty + mpg$hwy)/2
head(mpg)
# case1
mpg$test = ifelse(mpg$total >= 30, "A", (ifelse(mpg$total >= 20, "B", "C")))
head(mpg)
View(mpg)
table(mpg$test)
# case2
mpg %>%
mutate(test = ifelse(total >= 30, "A", (ifelse(total >=20 , "B", "C"))))
# case2
mpg2 = mpg %>%
mutate(test = ifelse(total >= 30, "A", (ifelse(total >=20 , "B", "C"))))
View(mpg2)
qplot(mpg$test)
midwest
midwest = ggplot2::midwest
View(midwest)
str(midwest)
midwest = rename(midwest, asian = popasian, total = poptotal)
View(midwest)
midwest = midwest %>%
mutate(ratio = (asian / total) * 100)
metate(group = ifelse(ratio > mean(ratio), "large", "small")
mutate(group = ifelse(ratio > mean(ratio), "large", "small")
midwest = midwest %>%
mutate(group = ifelse(ratio > mean(ratio), "large", "small"))
qplot(midwest$group)
table(midwest$group)
library(dplyr)
library(ggplot2)
mpg = ggplot2::mpg
## 배경 레이어 지정
ggplot(data = mpg, aes(x = displ, y = hwy))
## 그래프를 그려주는 레이어 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point()
## 옵션을 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() + xlim(3, 6)
## y축의 범위를 지정
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point() + xlim(3, 6) + ylim(20, 30)
## 막대 그래프
mpg2 = mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
ggplot(data = mpg2, aes(x = drv, y = mean_hwy)) +
geom_col()
# 오름차순 변경
ggplot(data = mpg2, aes(x = reorder(drv, mean_hwy),
y = mean_hwy)) +
geom_col()
# 내림차순 변경
ggplot(data = mpg2, aes(x = reorder(drv, desc(mean_hwy)),
y = mean_hwy)) +
geom_col()
## geom_bar() 막대그래프
ggplot(data = mpg, aes(x = drv)) + geom_bar()
table(mpg$drv)
qplot(mpg$drv)
## 라인 그래프
economics = ggplot2::economics
View(economics)
ggplot(data = economics, aes(x = date, y = unemploy)) +
geom_line()
## 박스 플롯
ggplot(data = mpg, aes(x = drv, y = hwy)) +
geom_boxplot()
library(dplyr)
library(ggplot2)
## sav 확장자 파일을 로드 하기위한 패키지 설치
install.packages("foreign")
install.packages("readxl")
library(foreign)
library(readxl)
## 한국복지패널 데이터 로드
raw_welfare = read.spss(file = "./csv/Koweps_hpc10_2015_beta1.sav",
to.data.frame = T)
View(raw_welfare)
dim(raw_welfare)
# 복사본 생성
wefare = raw_welfare
# 복사본 생성
welfare = raw_welfare
# 컬럼의 이름 변경
welfare = rename(welfare,
gender = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job = h10_eco9,
code_region = h10_reg7)
## 성별에 따라서 월급의 차이가 과연 존재하는가?
table(welfare%gender)
## 성별에 따라서 월급의 차이가 과연 존재하는가?
table(welfare$gender)
## 성별은 1 : 남자, 2 : 여자, 9 : 무응답
## 9라는 데이터가 존재한다 생각하고 9라는 답은 결측치로 처리
welfare$gender = ifelse(welfare$gender == 9, NA, welfare$gender)
table(is.na(welfare$gender))
# gender의 1은 male , 2는 female 변경
welfare$gender = ifelse(welfare$gender == 1, "male", "female")
table(welfare$gender)
# case3
welfare$income = ifelse(welfare$income %in% c(0, 9999),
NA, welfare$income)
# 결측치 확인
table(is.na(welfare$income))
gender_income = welfare %>%
filter(!is.na(income)) %>%
group_by(gender) %>%
summarise(mean_income = mean(income))
gender_income
ggplot(data = gender_income, aes(x = gender, y = mean_income)) +
geom_col()
# birth 확인
table(welfare$birth)
## age 컬럼을 생성
welfare$age = 2022 - welfare$birth
table(welfare$age)
age_income = welfare %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income))
ggplot(data = age_income, aes(x = age, y = mean_income)) +
geom_col()
## 연령대 파생변수 생성
## ageg -> 나이가 30세 미만 'young'
##  30세 이상 - 60세 미만 'middle'
##  60세 이상 - 'old'
welfare$ageg = ifelse(welfare$age < 30, 'young',
(ifelse (welfare< 60, 'middle', 'old')))
table(welfare$ageg)
## 코드북 파일 로드
list_job = read_excel("./csv/Koweps_Codebook.xlsx",
sheet = 2,
col_names = T)
View(list_job)
View(list_job)
View(age_income)
## 연령대 파생변수 생성
## ageg -> 나이가 30세 미만 'young'
##  30세 이상 - 60세 미만 'middle'
##  60세 이상 - 'old'
welfare$ageg = ifelse(welfare$age < 30, 'young',
(ifelse (welfare$age < 60, 'middle', 'old')))
table(welfare$ageg)
## 두개의 데이터프레임 결합
## left_join( 데이터프레임명1, 데이터프레임명2, by="공통되는 컬럼명" )
join_data = left_join(welfare, list_job, by="code_job")
table(join_data$job)
table(is.na(join_data$job))
## 결측치를 제거해야되는 컬럼 (job, income)
job_income = join_data %>%
filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(mean_income = mean(income))
View(job_income)
## 상위 10개만 출력
## 월급을 기준으로 내림차순 정렬
## 데이터의 시작부터 10개를 출력
job_income = job_income %>%
arrange(desc(income)) %>%
head(10)
## 상위 10개만 출력
## 월급을 기준으로 내림차순 정렬
## 데이터의 시작부터 10개를 출력
job_income = job_income %>%
arrange(desc(mean_income)) %>%
head(10)
job_income
# 시각화
ggplot(data=job_income, aes(x = job, y = mean_income)) +
geom_col()
ggplot(data=job_income, aes(x = reorder(job, mean_income), y = mean_income)) +
geom_col()
ggplot(data=job_income, aes(x = reorder(job, -mean_income), y = mean_income)) +
geom_col()
ggplot(data=job_income, aes(x = reorder(job, -mean_income),
y = mean_income)) +
geom_col() + coord_flip()
ggplot(data=job_income, aes(x = reorder(job, mean_income),
y = mean_income)) +
geom_col() + coord_flip()
## plotly 패키지 설치
install.packages("plotly")
library(plotly)
top10 = ggplot(data=job_income, aes(x = reorder(job, mean_income),
y = mean_income)) +
geom_col() + coord_flip()
plotly(top10)
ggplotly(top10)
## dygraghs -> 시계열데이터를 시각화
install.packages("dygraghs")
library(dygraphs)
economics = ggplot2::economics
library(xts)
eco = xts(economics$unemploy, order.by =economics$date)
head(eco, 3)
## dygraghs -> 시계열데이터를 시각화
install.packages("dygraphs")
install.packages("dygraphs")
library(dygraphs)
economics = ggplot2::economics
## xts 데이터 타입 변경( 시계열 변경 )
library(xts)
eco = xts(economics$unemploy, order.by =economics$date)
head(eco, 3)
dygraph(eco)
dygraph(eco) %>% dyRangeSelector()
install.packages("remotes")
install.packages(c("hash", "tau", "Sejong", "RSQLite", "devtools",
"bit", "rex", "lazyeval", "htmlwidgets", "crosstalk",
"promises", "later", "sessioninfo", "xopen", "bit64",
"blob", "DBI", "memoise", "plogr", "covr", "DT", "rcmdcheck", "rversions"), type = "binary")
install.packages("multilinguer")
library(multilinguer)
multilinguer::install_jdk()
1remotes::install_github('haven-jeon/KoNLP', upgrade = "never",
INSTALL_opts=c("--no-multiarch"))
multilinguer::install_jdk()
remotes::install_github('haven-jeon/KoNLP', upgrade = "never",
INSTALL_opts=c("--no-multiarch"))
library(KoNLP)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("stringr")
library(stringr)
txt = readLines("./csv/hiphop.txt")
head(txt)
nouns = str_replace_all(txt, "[[:punct:]]", " ")
wordcount = table(unlist[nouns])
wordcount = table(unlist(nouns))
wordcount
nouns = extracNoun(txt)
nouns = extractNoun(txt)
useNIADic()
install.packages("XML")
library(XML)
#접속 주소 변수
url <- "http://apis.data.go.kr/1160100/service/GetFnCoBasiInfoService/getFnCoOutl"
#서비스키
servicekey <- "dtbWOdJ%2FCz5HE0DGLU%2BCRPe7pOW0NIQBUcGEqsHZaTRiYCI%2F5%2BzugwzQjcvuId7NPdg6rUiW%2Bft3fm7yqyD4pw%3D%3D"
#페이지 넘버
pageno = 1
#페이지당 데이터의 개수
numofrows = 10
#데이터의 타입
type_data = "xml"
service_url = paste0(url,
"?serviceKey=", servicekey,
"&pageNo=", pageno,
"&numOfRows=", numofrows,
"&resultType=", type_data)
service_url
xmlDocument = xmlTreeParse(service_url,
useInternalNodes = TRUE,
encoding = "UTF-8")
xmlDocument
## xml root node 확인
rootnode = xmlRoot(xmlDocument)
rootnode
## 페이지당 데이터의 개수
rows = xpathSApply(rootnode, '//numOfRows', xmlValue)
rows
## 전체 데이터의 개수
total_rows = xpathSApply(rootnode, '//totalCount', xmlValue)
total_rows
# 반복 페이지당 데이터의 개수 / 전체 데이터의 개수 + 1
type(total_rows)
# 반복 페이지당 데이터의 개수 / 전체 데이터의 개수 + 1
typeof(total_rows)
rows = as.numeric(rows)
total_rows = as.numeric(total_rows)
loopcount = celling(total_rows/rows)
loopcount = ceiling(total_rows/rows)
loopcount
# 빈 데이터프레임 생성
total_data = data.frame()
for (i in 1:2){
service_url = paste0(url,
"?serviceKey=", servicekey,
"&pageNo=", i,
"&numOfRows=", numofrows,
"&resultType=", type_data)
xmlDocument = xmlTreeParse(service_url,
useInternalNodes = TRUE,
encoding = "UTF-8")
# rootnode 확인
rootnode = xmlRoot(xmlDocument)
# item 태그 안에 있는 값들을 호출
node = getNodeSet(rootnode, '//item')
# xml 데이터를 데이터프레임으로 변경
df_node = xmlToDataFrame(node)
# Total_data 유니언 결합
Total_data = rbind(Total_data, df_node)
}
# 빈 데이터프레임 생성
total_data = data.frame()
for (i in 1:2){
service_url = paste0(url,
"?serviceKey=", servicekey,
"&pageNo=", i,
"&numOfRows=", numofrows,
"&resultType=", type_data)
xmlDocument = xmlTreeParse(service_url,
useInternalNodes = TRUE,
encoding = "UTF-8")
# rootnode 확인
rootnode = xmlRoot(xmlDocument)
# item 태그 안에 있는 값들을 호출
node = getNodeSet(rootnode, '//item')
# xml 데이터를 데이터프레임으로 변경
df_node = xmlToDataFrame(node)
# Total_data 유니언 결합
total_data = rbind(total_data, df_node)
}
View(total_data)
write.csv(total_data, "금융.csv", row.names = F)
write.csv(total_data, "금융.csv", row.names = F, fileEncoding = "cp949")
## 지도 시각화
## 패키지 설치
install.packages("ggiraphExtra")
library(ggiraphExtra)
library(dplyr)
library(ggplot2)
library(tibble)
# 미국 주 별 강력범죄율
View(USArrests)
# tibble 패키지에 있는 rownames_to_column
# 인덱스의 값은 컬럼으로 이름을 부여
crime = rownames_to_column(USArrests, var="state")
head(crime, 1)
crime$state = tolower(crime$state)
head(crime)
# map 데이터를 가지고 오기 위해서 패키지
install.packages("maps")
library(maps)
# 미국 맵 데이터를 변수에 지정
states_map = map_data("state")
head(states_map)
ggChoropleth(
data = crime,
aes(fill = Murder,
map_id = state),
map = states_map
)
ggChoropleth(
data = crime,
aes(fill = Murder,
map_id = state),
map = states_map,
interactive = T
)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
str(korpop1)
View(korpop1)
korpop1 = rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
library(ggiraphExtra)
library(dplyr)
library(ggplot2)
library(tibble)
library(maps)
korpop1 = rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
ggChoropleth(
data = korpop1,
aes(fill = pop,
map_id = code,
tooltip = name),
map = kormap1,
interactive = T
)
